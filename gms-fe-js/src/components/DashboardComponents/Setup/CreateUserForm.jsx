"use client"
import { useCurrentUser } from '@/lib/hooks';
import { userRequest } from '@/lib/RequestMethods';
import React, { useEffect, useState } from 'react';
import { Formik, Form, Field } from 'formik';
import * as Yup from 'yup';
import toast from 'react-hot-toast';
import axios from 'axios';

// Validation Schema
const userValidationSchema = Yup.object().shape({
    role: Yup.string()
        .required('Role is required'),
    employeeId: Yup.string()
        .required('Employee is required'),
    branchName: Yup.string().required("Branch Name is required"),
    username: Yup.string()
        .required('Username is required')
        .min(3, 'Username must be at least 3 characters'),
    email: Yup.string()
        .email('Invalid email format')
        .required('Email is required'),
    password: Yup.string()
        .required('Password is required')
        .min(8, 'Password must be at least 8 characters'),
    profileImage: Yup.string()
});

const CreateUserForm = () => {

    const { user } = useCurrentUser();

    const fileInputRef = React.useRef(null);
    const [currentDate, setCurrentDate] = useState("");
    const [currentTime, setCurrentTime] = useState("");
    const [roles, setRoles] = useState(null);
    const [employees, setEmployees] = useState(null);
    const [offices, setOffices] = useState(null);
    const [isLoading, setIsLoading] = useState(false);


    useEffect(() => {
        const now = new Date();
        const date = now.toLocaleDateString('en-GB');
        const time = now.toLocaleTimeString('en-US');

        setCurrentDate(date);
        setCurrentTime(time);
    }, []);




    const getSelectedEmployeeName = (employeeId) => {
        const employee = employees?.find((employee) => employee.id === employeeId);
        return employee?.fullName || "Not Selected";
    }

    useEffect(() => {

        const getAllRoles = async () => {
            const token = localStorage.getItem('token');
            const res = await userRequest.get("/roles/organization", {
                headers: {
                    Authorization: `Bearer ${token}`
                }
            });
            setRoles(res.data.data);

        }

        const getAllEmployees = async () => {
            const token = localStorage.getItem('token');
            const res = await userRequest.get("/employee/by-organization", {
                headers: {
                    Authorization: `Bearer ${token}`
                }
            });
            setEmployees(res.data.data);
        }
        const getAllOffices = async () => {
            const token = localStorage.getItem('token'); // Or get it from your auth context/provider
            const res = await userRequest.get("/organizations/get-offices", {
                headers: {
                    Authorization: `Bearer ${token}`
                }
            });
            setOffices(res.data.data);
        }

        getAllRoles();
        getAllEmployees();
        getAllOffices();

    }, []);

    const getAutoGeneratedPassword = (setFieldValue) => {
        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';
        let autoPassword = '';
        for (let i = 0; i < 10; i++) {
            const randomIndex = Math.floor(Math.random() * chars.length);
            autoPassword += chars[randomIndex];
        }
        setFieldValue('password', autoPassword);
    };

    const handleFileUpload = async (event, setFieldValue) => {

        const file = event.target.files[0];
        if (file) {
            const maxSize = 10 * 1024 * 1024; // 10MB
            if (file.size > maxSize) {
                alert('File size must be less than 10MB');
                return;
            }

            try {
                const getUploadKeyPayload = {
                    fileName: file.name,
                    fileType: file.type,
                };

                const res = await userRequest.post("/file/presigned-url", getUploadKeyPayload);
                if (!res.data || !res.data.data) {
                    throw new Error('Invalid response from server');
                }
                const { key, uploadUrl } = res.data.data;
                if (!key || !uploadUrl) {
                    throw new Error('Missing upload URL or key from server');
                }

                // Upload file to S3
                const uploadFileResponse = await axios.put(uploadUrl, file, {
                    headers: {
                        "Content-Type": file.type,
                    },
                });
                
                if (uploadFileResponse.status !== 200) {
                    throw new Error('Failed to upload file to storage');
                }

                // Set only for profileImage field
                setFieldValue("profileImage", key);

            } catch (error) {
                console.error("File upload failed:", error);
                let errorMessage = 'File upload failed. ';
                
                if (error.response) {
                    console.error('Server error:', error.response.data);
                    errorMessage += error.response.data.message || 'Server error occurred.';
                } else if (error.request) {
                    console.error('Network error:', error.request);
                    errorMessage += 'Network error. Please check your connection.';
                } else {
                    console.error('Request error:', error.message);
                    errorMessage += error.message || 'Please try again.';
                }
                
                toast.error(errorMessage);
            }
        }
    };

    const handleSubmit = async (values, { resetForm }) => {
        try {
            setIsLoading(true);

            const createUserPayload = {
                employeeId: values.employeeId,
                officeId: values.branchName, //The value being attached to office id is not branch name its office id but shown as branchName in field to display to the user
                email: values.email,
                password: values.password,
                userName: values.username,
                profileImage: values.profileImage,
                roleId: values.role
            }
            const response = await userRequest.post('/users/create', createUserPayload);

            if (response.data) {
                toast.success('User created successfully!');
                resetForm();
                if (fileInputRef.current) fileInputRef.current.value = '';
            }
        } catch (error) {
            console.error('Error creating user:', error);
            const errorMessage = error.response?.data?.message || 'Error creating user. Please try again.';
            toast.error(errorMessage);
        } finally {
            setIsLoading(false);
        }
    }



    return (
        <div className="min-h-screen bg-formBGBlue flex flex-col px-4 pt-4 w-full">
            {/* Breadcrumb */}
            <div className="w-full max-w-5xl">
                <aside className="bg-white border-b rounded-xl border-gray-200">
                    <div className="px-6 py-4">
                        <article className="flex items-center space-x-2 text-sm text-gray-600">
                            <span>Dashboard</span>
                            <span>&gt;</span>
                            <span className="text-gray-900 font-medium">Create user</span>
                        </article>
                    </div>
                </aside>
            </div>

            {/* Form Card */}
            <div className="w-full max-w-5xl bg-white rounded-xl shadow-md mt-8 p-8">
                <h2 className="text-xl font-semibold mb-6">Create User</h2>
                <Formik
                    initialValues={{
                        role: '',
                        employeeId: '',
                        username: '',
                        email: '',
                        password: '',
                        profileImage: ''
                    }}
                    validationSchema={userValidationSchema}
                    onSubmit={handleSubmit}
                >
                    {({ values, errors, touched, isValid, resetForm, setFieldValue }) => (
                        <Form className="space-y-8">
                            {/* Top Row: Office ID, Staff ID, Date, Time */}
                            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                                <div>
                                    <label className="block text-xs text-gray-500 mb-1">ID</label>
                                    <input type="text" value={user?.id} disabled className="w-full bg-formBgLightGreen text-gray-700 rounded-md px-4 py-2" />
                                </div>
                                <div>
                                    <label className="block text-xs text-gray-500 mb-1">Date</label>
                                    <input type="text" value={currentDate} disabled className="w-full bg-formBgLightGreen text-gray-700 rounded-md px-4 py-2" />
                                </div>
                                <div>
                                    <label className="block text-xs text-gray-500 mb-1">Time</label>
                                    <input type="text" value={currentTime} disabled className="w-full bg-formBgLightGreen text-gray-700 rounded-md px-4 py-2" />
                                </div>
                            </div>

                            {/* Middle Row: Select Role, Employee Service No. */}
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                {/* Select Branch Name (showing branch name but in value we will throw officeId) */}
                                <div>
                                    <label className="block text-xs text-gray-500 mb-1">
                                        Select Branch <span className="text-red-500">*</span>
                                    </label>
                                    <Field
                                        as="select"
                                        name="branchName"
                                        className={`w-full bg-gray-50 rounded-md px-4 py-2 border ${touched.branchName && errors.branchName
                                            ? 'border-red-500'
                                            : 'border-gray-200'
                                            } text-gray-700`}
                                    >
                                        <option value="">Select</option>
                                        {offices?.map((office) => (
                                            <option key={office.id} value={office.id}>
                                                {`${office.branchName} (ID: ${office.branchCode})`}
                                            </option>
                                        ))}
                                    </Field>
                                    {touched.employeeId && errors.employeeId && (
                                        <p className="mt-1 text-sm text-red-500">{errors.employeeId}</p>
                                    )}
                                </div>
                                <div>
                                    <label htmlFor="role" className="block text-xs text-gray-500 mb-1">
                                        Select Role <span className="text-red-500">*</span>
                                    </label>
                                    <Field
                                        as="select"
                                        id="role"
                                        name="role"
                                        className={`w-full bg-gray-50 rounded-md px-4 py-2 border ${touched.role && errors.role
                                            ? 'border-red-500'
                                            : 'border-gray-200'
                                            } text-gray-700`}
                                    >
                                        <option value="">Select</option>
                                        {roles?.map((role) => (
                                            (role.roleName !== 'superAdmin' && role.roleName !== 'organizationAdmin' && role.roleName !== 'client') && (
                                                <option key={role.id} value={role.id}>
                                                    {role.roleName.charAt(0).toUpperCase() + role.roleName.slice(1)}
                                                </option>
                                            )
                                        ))}
                                    </Field>
                                    {touched.role && errors.role && (
                                        <p className="mt-1 text-sm text-red-500">{errors.role}</p>
                                    )}
                                </div>

                                <div>
                                    <label className="block text-xs text-gray-500 mb-1">
                                        Select Employee Service No. <span className="text-red-500">*</span>
                                    </label>
                                    <Field
                                        as="select"
                                        name="employeeId"
                                        className={`w-full bg-gray-50 rounded-md px-4 py-2 border ${touched.employeeId && errors.employeeId
                                            ? 'border-red-500'
                                            : 'border-gray-200'
                                            } text-gray-700`}
                                    >
                                        <option value="">Select</option>
                                        {employees?.map((employee) => (
                                            <option key={employee.id} value={employee.id}>
                                                {/* {`${employee.fullName} (ID: ${employee.id})`} */}
                                                {`${employee.id}`}
                                            </option>
                                        ))}
                                    </Field>
                                    {touched.employeeId && errors.employeeId && (
                                        <p className="mt-1 text-sm text-red-500">{errors.employeeId}</p>
                                    )}
                                </div>

                                <div>
                                    <label className="block text-xs text-gray-500 mb-1">
                                        Employee Name                                    </label>
                                    <input type="text" value={getSelectedEmployeeName(values?.employeeId)} disabled className={`w-full bg-gray-50 rounded-md px-4 py-2 border ${touched.employeeId && errors.employeeId
                                        ? 'border-red-500'
                                        : 'border-gray-200'
                                        } text-gray-700`} />
                                </div>
                            </div>


                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <label className="block text-xs text-gray-500 mb-1">
                                        Username <span className="text-red-500">*</span>
                                    </label>
                                    <Field
                                        type="text"
                                        name="username"
                                        placeholder="Enter username"
                                        className={`w-full bg-gray-50 rounded-md px-4 py-2 border ${touched.username && errors.username
                                            ? 'border-red-500'
                                            : 'border-gray-200'
                                            } text-gray-700`}
                                    />
                                    {touched.username && errors.username && (
                                        <p className="mt-1 text-sm text-red-500">{errors.username}</p>
                                    )}
                                </div>
                                <div>
                                    <label className="block text-xs text-gray-500 mb-1">
                                        Email ID <span className="text-red-500">*</span>
                                    </label>
                                    <Field
                                        type="email"
                                        name="email"
                                        placeholder="Enter Email ID"
                                        className={`w-full bg-gray-50 rounded-md px-4 py-2 border ${touched.email && errors.email
                                            ? 'border-red-500'
                                            : 'border-gray-200'
                                            } text-gray-700`}
                                    />
                                    {touched.email && errors.email && (
                                        <p className="mt-1 text-sm text-red-500">{errors.email}</p>
                                    )}
                                </div>
                                <div>
                                    <label className="block text-xs text-gray-500 mb-1">
                                        Profile Image
                                    </label>
                                    <input
                                        type="file"
                                        accept="image/*"
                                        ref={fileInputRef}
                                        onChange={(event) => handleFileUpload(event, setFieldValue)}
                                        className="w-full bg-gray-50 rounded-md px-4 py-2 border border-gray-200 text-gray-700 cursor-pointer"
                                    />
                                    {touched.profileImage && errors.profileImage && (
                                        <p className="mt-1 text-sm text-red-500">{errors.profileImage}</p>
                                    )}
                                </div>

                                <div>
                                    <label className="block text-xs text-gray-500 mb-1">
                                        Password <span className="text-red-500">*</span>
                                    </label>
                                    <Field
                                        type="text"
                                        name="password"
                                        placeholder="Enter New Password or AutoGenerate"
                                        className={`w-full bg-gray-50 rounded-md px-4 py-2 border ${touched.password && errors.password
                                            ? 'border-red-500'
                                            : 'border-gray-200'
                                            } text-gray-700`}
                                    />
                                    {touched.password && errors.password && (
                                        <p className="mt-1 text-sm text-red-500">{errors.password}</p>
                                    )}
                                    <button
                                        type="button"
                                        onClick={() => getAutoGeneratedPassword(setFieldValue)}
                                        className="px-4 text-sm mt-3 py-2 border border-blue-500 text-blue-500 rounded-md hover:bg-blue-50 transition"
                                    >
                                        AutoGenerate
                                    </button>
                                </div>
                            </div>

                            {/* Buttons */}
                            <div className="flex justify-center space-x-4 pt-4">
                                <button
                                    type="button"
                                    onClick={() => resetForm()}
                                    className="px-8 py-2 border border-blue-500 text-blue-500 rounded-md hover:bg-blue-50 transition"
                                >
                                    Cancel
                                </button>
                                <button
                                    type="submit"
                                    disabled={isLoading || !isValid}
                                    className="px-8 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition disabled:bg-gray-400 disabled:cursor-not-allowed"
                                >
                                    {isLoading ? (
                                        <div className="flex items-center">
                                            <div className="w-5 h-5 border-t-2 border-b-2 border-white rounded-full animate-spin mr-2"></div>
                                            Creating...
                                        </div>
                                    ) : 'Save'}
                                </button>
                            </div>
                        </Form>
                    )}
                </Formik>
            </div>
        </div>
    );
};

export default CreateUserForm;